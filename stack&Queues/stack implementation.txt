// Stack using Arrays :

#include <bits/stdc++.h>

using namespace std;

class Stack{

  int size;
  int top;
  int * arr;
  public:
    Stack(){
    size = 1000;
    top = -1;
    arr = new int[size];
  }
  void push(int x){
    top++;
    arr[top] = x;
  }
  int pop(){
    int x = arr[top];
    top--;
    return x;
  }
  int Top(){
    return arr[top];
    
  }
  int Size(){
    return top+1;
  }
  
};

int main(){
  Stack s;
  s.push(10);
  cout<< s.Top()<<endl;
  s.push(20);
  s.push(30);

  cout<<"size of Stack : "<<s.Size()<<endl;

  return 0;
}

// Stack using Linked Lists

#include <bits/stdc++.h>
using namespace std;

class Node {
public:
    int data;
    Node* next;

    Node(int value) : data(value), next(NULL) {}
};


class Stack {
private:
    Node* top; 
    
public:
    Stack() 
    {
      top = NULL;
    }

    
    bool isEmpty() {
        return top == NULL;
    }

    void push(int value) {
        Node* newNode = new Node(value);
        newNode->next = top;
        top = newNode;
        cout << value << " pushed onto the stack." << endl;
    }
 
    void pop() {
        if (isEmpty()) {
            cout << "Stack underflow: Cannot pop from an empty stack." << endl;
            return;
        }

        Node* temp = top;
        top = top->next;
        int poppedValue = temp->data;
        delete temp;
        cout << poppedValue << " popped from the stack." << endl;
    }


    int peek() {
        if (isEmpty()) {
            std::cout << "Stack is empty." << std::endl;
            return -1;
        }

        return top->data;
    }
};

int main() {
    Stack myStack;

    myStack.push(10);
    myStack.push(20);
    myStack.push(30);

    std::cout << "Top element: " << myStack.peek() << std::endl;

    myStack.pop();
    myStack.pop();
    myStack.pop();
    myStack.pop(); 

    return 0;
}


