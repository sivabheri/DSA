#include<bits/stdc++.h>
using namespace std;

class Node {
public:
    int data;
    Node* next;
    Node* prev;

    Node(int d) : data(d), next(nullptr), prev(nullptr) {}
};

Node* head = nullptr;

void insert(int newdata) {
    Node* newNode = new Node(newdata);
    newNode->next = head;
    if (head != nullptr) {
        head->prev = newNode;
    }
    head = newNode;
}

void insertAtPos(int newdata, int pos) {
    if (pos < 0) {
        cout << "Invalid position" << std::endl;
        return;
    }

    if (pos == 0) {
        insert(newdata);
        return;
    }

    Node* newNode = new Node(newdata);
    Node* curr = head;
    Node* prev = nullptr;
    int curpos = 0;

    while (curr != nullptr && curpos < pos) {
        prev = curr;
        curr = curr->next;
        curpos++;
    }

    if (curpos < pos) {
        prev->next = newNode;
        newNode->prev = prev;
    } else {
        prev->next = newNode;
        newNode->prev = prev;
        newNode->next = curr;
        if (curr != nullptr) {
            curr->prev = newNode;
        }
    }
}

void deleteAtPos(int pos) {
    if (pos < 0) {
        cout << "Invalid position, cannot delete" << std::endl;
        return;
    }

    if (head == nullptr) {
        cout << "Empty list, cannot delete" << std::endl;
        return;
    }

    Node* curr = head;
    Node* prev = nullptr;
    int curpos = 0;

    while (curr != nullptr && curpos < pos) {
        prev = curr;
        curr = curr->next;
        curpos++;
    }

    if (curr == nullptr) {
        std::cout << "Invalid position" <<endl;
        return;
    }

    if (prev == nullptr) {
        head = head->next;
        if (head != nullptr) {
            head->prev = nullptr;
        }
    } else {
        prev->next = curr->next;
        if (curr->next != nullptr) {
            curr->next->prev = prev;
        }
    }

    delete curr;
}

void display() {
    Node* ptr = head;
    while (ptr != nullptr) {
        cout << ptr->data << " ";
        ptr = ptr->next;
    }
    cout <<endl;
}

int main() {
    vector<int> arr = {1, 2, 3, 4, 5};

    for (int i = 0; i < arr.size(); ++i) {
        insert(arr[i]);
    }

    cout << "Original linked list: ";
    display();

    int num = 99;
    int pos = 2;
    insertAtPos(num, pos);
    cout << "Linked list after inserting " << num << " at position " << pos << ": ";
    display();

    deleteAtPos(3);
    cout << "Linked list after deleting node at position 3: ";
    display();

    // Free the memory of the linked list
    while (head != nullptr) {
        Node* temp = head;
        head = head->next;
        delete temp;
    }

    return 0;
}
