Dynamic Programming :

1. Tabulation : Bottom-up

2. Memoization : Top-down



MEMOiZATION :

RULE 1 : check the base condition

RULE 2 : check if the the solution is already solved & stored in the dp array

RULE 3 : else , apply recursion to store the answer in the dp array and use it latter.

Example:

Fib(n) :

#include <bits/stdc++.h>
using namespace std;

int f(int n, vector<int> dp) {
  
  // check the base condition
  if (n <= 1) {
    return n;
  }
  
  // check if the the solution is already solved & stored in the dp array
  if (dp[n] != -1) return dp[n];

  // else , apply recursion to store the answer in the dp array and use it latter  
  return dp[n] = f(n-1,dp) + f(n-2,dp);
}

int main() {
  
  int n;
  cin >> n ;
  vector<int> dp(n+1,-1);
  cout << f(n,dp);
  
}


TABULATION :

Rule1 : dp[n+1]

Rule2 : initialize prev = dp[1] , prev2 = dp[0]

Rule3 : run a for loop : i ( 2 -> =n )
	every iter , curi = prev + prev2;
	move the variables prev2 & prev forward
	ie., prev2 = prev; 
	     prev = curi;

Since , we are doing for n+1 so, answer will be stored in prev

Example :

fib:
#include <bits/stdc++.h>
using namespace std;



int main() {
  
  int n;
  cin >> n ;
  
  int prev2 = 0 , prev = 1;
  
  for (int i=2; i<=n ; i++) {
    
    int curi = prev + prev2;
    prev2 = prev;
    prev = curi;
  }
  
  cout << prev << endl;
  
  return 0;
  
}